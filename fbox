#!/usr/bin/env python

# Version : 1.0.0
# Author  : faizal_zakaria@sigmadesigns.com

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import subprocess
import yaml
import re

#############################################################################
# Enum
#############################################################################

class Enum(set):
    def __getattr__(self, name):
        if name in self:
            return name
        raise AttributeError

FBOXSTATUS = Enum(['STOPPED', 'RUNNING', 'UNKNOWN'])

#############################################################################
# global variables
#############################################################################

author        = "Faizal Zakaria"
fbox_filename = "fboxfile"
dir           = {}
dir['pwd']    = os.getcwd()
fboxfile      = os.path.join(dir['pwd'], fbox_filename)
gateway       = "10.0.3.1"

DEBUG_TRACE = False

####################################################################
# Colors
####################################################################

magenta = "\033[35m"
yellow = "\033[33m"
green = "\033[32m"
red  = "\033[31m"
endc = "\033[0m"

####################################################################
# Functions
####################################################################

def usage(argv):
    print("\n-------------------------------------------------")
    print("Usage :")
    print("%s init    : To initialize" % (argv[0]))
    print("%s up      : To start lxc" % (argv[0]))
    print("%s halt    : To halt lxc" % (argv[0]))
    print("%s destroy : To destroy lxc" % (argv[0]))
    print("%s status  : To get lxc status" % (argv[0]))
    print("%s list    : To get lxc list" % (argv[0]))
    print("%s console : To go to lxc console" % (argv[0]))
    print("%s reload  : To reload/restart lxc" % (argv[0]))
    print("%s ssh     : To go to ssh lxc" % (argv[0]))
    print("-------------------------------------------------\n")

def welcome():
    print("\n-------------------------------------------------")
    print("\tWelcome to %s box" % fbox_name)
    print("\tDefault user     : ubuntu")
    print("\tDefault password : ubuntu")
    print("\t(ctr a-q to exit)")
    print("-------------------------------------------------\n")

def provision():
    print("\n-------------------------------------------------")
    print("If its your first time,")
    print("Please run the provision as below :")
    print("ssh -t ubuntu@%s /home/ubuntu/fbox/provisions/finishinstall.sh" % int_cmd_getip())
    print("Default password : ubuntu")
    print("-------------------------------------------------\n")

#############################################################################
# commands
#############################################################################

def cmd_init():
    trace(sys._getframe().f_code.co_name)
    f = open(fboxfile, 'w')
    f.write("#Auto generated file\n")
    f.write("#This will have all the fbox config\n")
    f.close()

def cmd_up():
    trace(sys._getframe().f_code.co_name)

    #############################################
    ################ Create #####################
    if not grep(cmd_list(False), fbox_name):
        cmd = [ "sudo", "lxc-create", "-t", template, "-n", fbox_name, "--" ]
        cmd.extend(['-a', archi, '-r', revision])

        info("executing command : %s" % ' '.join(cmd))
        info("Could take a while, please wait ...")
        if execute(cmd, True) != 0:
            error("Failed to execute %s" % cmd)

    #############################################
    ################## Run ######################
    if cmd_status() == FBOXSTATUS.STOPPED:
        int_cmd_mounts()
        int_cmd_run()
        cmd_status()
        provision()

def cmd_halt():
    trace(sys._getframe().f_code.co_name)
    if cmd_status() == FBOXSTATUS.RUNNING:
        int_cmd_stop()
        cmd_status()

def cmd_reload():
    trace(sys._getframe().f_code.co_name)
    cmd_halt()
    cmd_up()

def cmd_destroy():
    trace(sys._getframe().f_code.co_name)
    cmd_halt()
    int_cmd_destroy()

def cmd_console():
    trace(sys._getframe().f_code.co_name)
    if cmd_status() != FBOXSTATUS.RUNNING:
        error("You need to do fbox up first")
        return 1
    welcome()
    int_cmd_console()

def cmd_list(verbose=True):
    trace(sys._getframe().f_code.co_name)
    cmd = [ "sudo", "lxc-ls" ]
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    ret = p.wait()
    output = p.communicate()
    if verbose:
        printc(output[0], yellow)
    return output[0]

def cmd_ssh(verbose=True):
    trace(sys._getframe().f_code.co_name)
    os.execl("/bin/sh", "sh", "-c", "ssh ubuntu@%s" % int_cmd_getip())

def cmd_status(verbose=True):
    trace(sys._getframe().f_code.co_name)

    if not grep(cmd_list(False), fbox_name):
        if verbose:
            info("\n%s is UNKNOWN\n" % fbox_name)
        return FBOXSTATUS.UNKNOWN

    cmd = [ "sudo", "lxc-info", "-n", fbox_name ]
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    ret = p.wait()
    output = p.communicate()
    if re.match(".*STOPPED", output[0]):
        if verbose:
            info("\n%s is STOPPED\n" % fbox_name)
        return FBOXSTATUS.STOPPED
    elif re.match(".*RUNNING", output[0]):
        if verbose:
            info("\n%s is RUNNING\n" % fbox_name)
        return FBOXSTATUS.RUNNING

def cmd_remount():
    int_cmd_mounts()

#############################################################################
# Internal commands
#############################################################################

def int_cmd_run():
    trace(sys._getframe().f_code.co_name)
    cmd = [ "sudo", "lxc-start", "-n", fbox_name, "-d", "-c", "/var/run/lxc/%s.console" % fbox_name ]
    log(' '.join(cmd))
    if (execute(cmd) != 0):
        error("Failed to execute cmd")
        return 1
    cmd = [ "sudo", "lxc-wait", "-n", fbox_name, "-s", "RUNNING" ]
    log(' '.join(cmd))
    execute(cmd)
    if (execute(cmd) != 0):
        error("Failed to execute cmd")
        return 1
    return 0

def int_cmd_stop():
    trace(sys._getframe().f_code.co_name)
    cmd = [ "sudo", "lxc-stop", "-n", fbox_name ]
    log(' '.join(cmd))
    if (execute(cmd) != 0):
        error("Failed to execute cmd")
        return 1
    cmd = [ "sudo", "lxc-wait", "-n", fbox_name, "-s", "STOPPED" ]
    log(' '.join(cmd))
    execute(cmd)
    if (execute(cmd) != 0):
        error("Failed to execute cmd")
        return 1
    return 0

def int_cmd_destroy():
    trace(sys._getframe().f_code.co_name)
    cmd = [ "sudo", "lxc-destroy", "-n", fbox_name ]
    log(' '.join(cmd))
    if (execute(cmd) != 0):
        error("Failed to execute cmd")
        return 1
    return 0

def int_cmd_console():
    trace(sys._getframe().f_code.co_name)
    cmd = [ "sudo", "lxc-console", "-n", fbox_name ]
    log(' '.join(cmd))
    if (execute(cmd, True) != 0):
        error("Failed to execute cmd")
        return 1
    return 0

def int_cmd_mounts():
    trace(sys._getframe().f_code.co_name)
    configfile = os.path.join("/var/lib/lxc", fbox_name, "config")
    if not os.path.isfile(configfile):
        error("%s is not exist" % configfile)
        return 1

    #############################################
    ############### Remove entry  ###############
    start = -1
    end = -1
    for i, line in enumerate(open(configfile)):
        if re.search("# start fbox entry", line):
            start = i + 1
        if re.search("# end fbox entry", line):
            end = i + 1

    if start >= 0 and end >= 0:
        cmd = [ "sudo", "sed", "-i", '%s,%sd' % (start, end), configfile ]
        if (execute(cmd, True) != 0):
            error("Failed to execute cmd")
            return 1

    hasEntry = False
    entry = "\"# start fbox entry\n"

    #############################################
    ############### Check all item ##############
    for item in mounts:
        log(item['host'])
        host_dir = item['host']
        target_dir = "/var/lib/lxc/%s/rootfs/%s" % (fbox_name, item['target'])
        if not os.path.exists(host_dir):
            error("Dir %s not exist" % host_dir)
            continue
        cmd = [ "sudo", "mkdir", "-p", target_dir ]
        if (execute(cmd, True) != 0):
            error("Failed to execute cmd")
            continue
        entry += "lxc.mount.entry = %s %s none defaults,bind 0 0\n" % (host_dir, target_dir)
        hasEntry = True

    #############################################
    ############### Write to config #############
    entry += "# end fbox entry\""
    if hasEntry:
        cmd = [ "sudo", "sh", "-c", "echo %s >> %s" % (entry, configfile) ]
        if (execute(cmd, True) != 0):
            error("Failed to execute cmd")
            return 1

def int_cmd_provision_puppet():
    trace(sys._getframe().f_code.co_name)

def int_cmd_getip():
    trace(sys._getframe().f_code.co_name)
    cmd = [ "dig", fbox_name, "@%s" % gateway, "+short" ]
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    output = p.communicate()
    return output[0].strip()

#############################################################################
# Helper
#############################################################################

def grep(src, data):
    for line in src.split("\n"):
        if re.match(data, line):
            return True
    return False

def trace(caller):
    if DEBUG_TRACE:
        printc("\t TRACE : " + caller, magenta)

def load_config(configfile):
    with open(configfile, 'r') as getConfig:
        return yaml.load(getConfig.read())

def write_config(configfile, data):
    with open(configfile, 'w') as setConfig:
        setConfig.write(yaml.dump(d, indent=4, default_flow_style=False))

def print_config(config):
    print yaml.dump(config, indent=4, default_flow_style=False)

def fboxfile_exist():
    if not os.path.exists(fboxfile):
        return False
    return True

def printc(msg, color):
    print(color + msg + endc)

def log(msg):
    printc(msg, green)

def info(msg):
    printc(msg, yellow)

def error(msg):
    printc(msg, red)

def exec_cmd(cmd):
    if cmd in globals():
        if cmd != "cmd_init" and not fboxfile_exist():
            error("You need to run fbox init first")
            return 1
        elif cmd == "cmd_init" and fboxfile_exist():
            error("fboxfile is not empty")
            return 1
        globals()[cmd]()
        return 0
    else:
        error("fbox does not understand your command : %s" % cmd)
        return 1

def execute(cmd, verbose=False):
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    if verbose:
        while True:
            out = p.stdout.read(1)
            if out == '' and p.poll() != None:
                break
            if out != '':
                sys.stdout.write(out)
                sys.stdout.flush()
    ret = p.wait()
    output = p.communicate()
    return p.returncode

#############################################################################
# main()
#############################################################################

def main(argv=sys.argv):

    info("fbox by %s" % author)

    ###########################################
    # Check usage
    ###########################################

    if argv.__len__() < 2 or argv.__len__() > 2:
        usage(argv)
        return -1

    ###########################################
    # Get command and execute
    ###########################################

    ###########################################
    # Load fboxfile
    ###########################################
    config = load_config(fboxfile)

    print_config(config)

    global template
    global fbox_name
    global archi
    global revision
    global mounts

    template = config['container']['template']
    fbox_name = config['container']['name']
    archi = config['container']['args']['archi']
    revision = config['container']['args']['revision']
    mounts = config['mounts']
    mounts.append({ 'host' : '%s' % dir['pwd'], 'target' : '/home/ubuntu/fbox' })

    ###########################################
    # Get command and execute
    ###########################################

    cmd = "cmd_%s" % argv[1]
    if exec_cmd(cmd):
        usage(argv)
        return -1

if __name__ == "__main__":
    main()
